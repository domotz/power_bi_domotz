{
  "info": {
    "contact": {
      "email": "support@domotz.com",
      "name": "API Support"
    },
    "description": "### The Domotz Public API\n\nUse the \"API Key Endpoint\" which you can retrieve from the Domotz Portal as the Base URL for your API calls.\n\nThe Domotz Public API uses standard HTTP response codes, authentication, and verbs. JSON format is used in responses and accepted for request bodies. All date-time formats are expressed as yyyy-mm-ddThh:mm:ss. Date-time must be expressed in UTC. Specification of different TimeZones are not allowed.\n\n### Domotz Webhook\nIt is possible to subscribe to events happening on the Domotz platform, both at an Agent level and Device level, through the usage of Webhooks.\n\nPlease refer to the [user-guide](https://help.domotz.com/user-guide/shared-alerts-webhooks-ticketing-systems/) on the usage of the Webhook as a possible contact channel to receive notification of events and how to create a Shared Alert Profile. Moreover, refer to [getAlertProfiles](#getalertprofiles), [bindAlertProfileToAgent](#bindalertprofiletoagent) and [bindAlertProfileToDevice](#bindalertprofiletodevice) on how to retrieve the list of Shared Alert Profiles and bind to Agents and Devices respectively. In those same sections you also have the list of all the possible Webhook events and references to the Schemas.\n",
    "termsOfService": "https://www.domotz.com/terms-and-conditions/",
    "title": "Domotz Public API",
    "version": "1.0.1"
  },
  "security": [
    {
      "api_key": []
    }
  ],
  "paths": {
    "/agent": {
      "get": {
        "summary": "Returns the agents list",
        "tags": [
          "agent"
        ],
        "parameters": [
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return",
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "default": 10,
            "type": "integer"
          },
          {
            "name": "page_number",
            "required": false,
            "in": "query",
            "description": "The requested page number, 0-indexed",
            "format": "int32",
            "minimum": 0,
            "default": 0,
            "type": "integer"
          },
          {
            "name": "display_name",
            "required": false,
            "in": "query",
            "description": "Consider only agents with `display_name` containing the string (case insensitive)",
            "type": "string"
          },
          {
            "name": "team_name",
            "required": false,
            "in": "query",
            "description": "Filters by team name (companies only)",
            "type": "string"
          }
        ],
        "operationId": "listAgents",
        "responses": {
          "200": {
            "description": "The agent list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentBase"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "head": {
        "summary": "Counts the agents",
        "tags": [
          "agent"
        ],
        "parameters": [
          {
            "name": "display_name",
            "required": false,
            "in": "query",
            "description": "Consider only agents with `display_name` containing the string (case insensitive)",
            "type": "string"
          },
          {
            "name": "team_name",
            "required": false,
            "in": "query",
            "description": "Filters by team name (companies only)",
            "type": "string"
          }
        ],
        "operationId": "countAgents",
        "responses": {
          "204": {
            "description": "The number of agents matching the filtering criteria",
            "headers": {
              "X-Entities-Count": {
                "description": "The number of agents matching the filtering criteria",
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      }
    },
    "/agent/{agent_id}": {
      "get": {
        "summary": "Returns the details of an agent",
        "tags": [
          "agent"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "getAgent",
        "responses": {
          "200": {
            "description": "The agent",
            "schema": {
              "$ref": "#/definitions/AgentDetail"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "Deletes an agent",
        "tags": [
          "agent"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "deleteAgent",
        "responses": {
          "204": {
            "description": ""
          }
        }
      }
    },
    "/agent/{agent_id}/connection/consumption": {
      "get": {
        "summary": "Get the connection consumption on the given agent",
        "tags": [
          "agent"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "getConnectionConsumption",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectionConsumption"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/agent/{agent_id}/device": {
      "get": {
        "summary": "Returns all the devices of an agent",
        "tags": [
          "device"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "show_hidden",
            "required": false,
            "in": "query",
            "description": "Whether to include hidden devices in the returned list",
            "type": "boolean"
          }
        ],
        "operationId": "listDevices",
        "responses": {
          "200": {
            "description": "The list of all devices in the Agent's monitored networks",
            "schema": {
              "type": "array",
              "items": {}
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "Deletes all the DOWN devices of *IP* protocol",
        "tags": [
          "device"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "deleteDownDevices",
        "responses": {
          "204": {
            "description": ""
          }
        }
      }
    },
    "/agent/{agent_id}/device/{device_id}": {
      "get": {
        "summary": "Returns the details of a device",
        "tags": [
          "device"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "device_id",
            "required": true,
            "in": "path",
            "description": "Device ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "getDevice",
        "responses": {
          "200": {
            "description": "An object containing the device details",
            "schema": {}
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "summary": "Deletes a device, whether ONLINE, OFFLINE or DOWN . If a device  is deleted while online, it may reappear when rediscovered automatically",
        "tags": [
          "device"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "device_id",
            "required": true,
            "in": "path",
            "description": "Device ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "deleteDevice",
        "responses": {
          "204": {
            "description": ""
          }
        }
      }
    },
    "/agent/{agent_id}/device/{device_id}/{field}": {
      "put": {
        "summary": "Changes a field of the device or one of its details",
        "tags": [
          "device"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "device_id",
            "required": true,
            "in": "path",
            "description": "Device ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "field",
            "required": true,
            "in": "path",
            "description": "The field to update - for the type and valid values see the description of the corresponding output parameter",
            "enum": [
              "importance",
              "user_data/model",
              "user_data/type",
              "user_data/name",
              "user_data/vendor",
              "details/room",
              "details/zone"
            ],
            "type": "string"
          },
          {
            "required": true,
            "description": "The value that the field will change to",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "editDevice",
        "responses": {
          "204": {
            "description": ""
          }
        },
        "consumes": [
          "application/json"
        ]
      }
    },
    "/agent/{agent_id}/device/{device_id}/action/power": {
      "get": {
        "summary": "Returns the power management actions available on the device at the current moment.See <a href='#schemadevicepoweraction'> DevicePowerAction </a> schema for further details.",
        "tags": [
          "device"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "device_id",
            "required": true,
            "in": "path",
            "description": "Device ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "getDevicePowerActions",
        "responses": {
          "200": {
            "description": "Returns a JSON object indicating the current availability of each power action on the device ",
            "schema": {
              "$ref": "#/definitions/DevicePowerAction"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/agent/{agent_id}/device/{device_id}/eye/snmp": {
      "get": {
        "summary": "Retrieves the list of configured SNMP Domotz Eyes",
        "tags": [
          "eyes"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "device_id",
            "required": true,
            "in": "path",
            "description": "Device ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "listEyesSNMP",
        "responses": {
          "200": {
            "description": "The list of configured SNMP Domotz Eyes for the device and their latest values",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SNMPDomotzEye"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "Creates a new SNMP Domotz Eyes",
        "tags": [
          "eyes"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "device_id",
            "required": true,
            "in": "path",
            "description": "Device ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SNMPDomotzEyeCreation"
            }
          }
        ],
        "operationId": "createEyeSNMP",
        "responses": {
          "201": {
            "description": ""
          }
        },
        "consumes": [
          "application/json"
        ]
      }
    },
    "/agent/{agent_id}/device/{device_id}/eye/snmp/{sensor_id}/function": {
      "get": {
        "summary": "Retrieves the list of functions for the SNMP trigger Domotz Eyes",
        "tags": [
          "eyes"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "device_id",
            "required": true,
            "in": "path",
            "description": "Device ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "sensor_id",
            "required": true,
            "in": "path",
            "description": "SNMP Eye ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "listEyesSNMPTriggerFunction",
        "responses": {
          "200": {
            "description": "The list of functions that can be used by the trigger",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SNMPDomotzEyeTriggerFunction"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/agent/{agent_id}/device/{device_id}/eye/snmp/{sensor_id}/history": {
      "get": {
        "summary": "Returns the time series of the SNMP Domotz Eyes collected samples",
        "tags": [
          "eyes"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "device_id",
            "required": true,
            "in": "path",
            "description": "Device ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "sensor_id",
            "required": true,
            "in": "path",
            "description": "SNMP Eye ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "The start time of the time series. Default value is one week",
            "type": "string"
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "description": "The end time of the time series. Default value is now",
            "type": "string"
          }
        ],
        "operationId": "getEyesSNMPHistory",
        "responses": {
          "200": {
            "description": "The list of SNMP Domotz Eyes samples",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceEyeSNMPHistorySample"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/agent/{agent_id}/device/{device_id}/eye/snmp/{sensor_id}/trigger": {
      "get": {
        "summary": "Retrieves the list of triggers for the SNMP Sensor",
        "tags": [
          "eyes"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "device_id",
            "required": true,
            "in": "path",
            "description": "Device ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "sensor_id",
            "required": true,
            "in": "path",
            "description": "SNMP Eye ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "listEyesSNMPTrigger",
        "responses": {
          "200": {
            "description": "The list of triggers associated to the sensor",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SNMPDomotzEyeTrigger"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/agent/{agent_id}/device/{device_id}/eye/tcp": {
      "get": {
        "summary": "Retrieves the list of configured TCP Domotz Eyes",
        "tags": [
          "eyes"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "device_id",
            "required": true,
            "in": "path",
            "description": "Device ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "listEyesTCP",
        "responses": {
          "200": {
            "description": "The list of configured TCP Domotz Eyes for the device and their latest values",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TCPDomotzEye"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "Creates a new TCP Domotz Eyes",
        "tags": [
          "eyes"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "device_id",
            "required": true,
            "in": "path",
            "description": "Device ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TCPDomotzEyeCreation"
            }
          }
        ],
        "operationId": "createEyeTCP",
        "responses": {
          "201": {
            "description": ""
          }
        },
        "consumes": [
          "application/json"
        ]
      }
    },
    "/agent/{agent_id}/device/{device_id}/history/network/event": {
      "get": {
        "summary": "Returns the time series of the state changes of the device",
        "tags": [
          "metrics"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "device_id",
            "required": true,
            "in": "path",
            "description": "Device ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "The start time of the time series. Default value is one week",
            "type": "string"
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "description": "The end time of the time series. Default value is now",
            "type": "string"
          }
        ],
        "operationId": "getDeviceStatusHistory",
        "responses": {
          "200": {
            "description": "A time series",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceHistory"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/agent/{agent_id}/device/{device_id}/history/rtd": {
      "get": {
        "summary": "Returns the Round Trip Delay history for the device. Each item represents the statistical aggregate of a set of Round Trip Delay measurements",
        "tags": [
          "metrics"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "device_id",
            "required": true,
            "in": "path",
            "description": "Device ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "The start time of the time series. Default value is one week",
            "type": "string"
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "description": "The end time of the time series. Default value is now",
            "type": "string"
          }
        ],
        "operationId": "getDeviceRTDHistory",
        "responses": {
          "200": {
            "description": "Device RTD History",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceRTDHistorySample"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/agent/{agent_id}/device/{device_id}/snmp-authentication": {
      "get": {
        "summary": "Retrieves the SNMP authentication info",
        "tags": [
          "device"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "device_id",
            "required": true,
            "in": "path",
            "description": "Device ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "getSNMPAuthentication",
        "responses": {
          "200": {
            "description": "The SNMP authentication info for the device",
            "schema": {
              "$ref": "#/definitions/SNMPDomotzAuthentication"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "put": {
        "summary": "Sets the SNMP authentication info. <ul><li>_snmp_read_community_ and _snmp_write_community_ are  relevant only for _V1_ and _V2_. </li><li>_V3_NO_AUTH_ requires a valid _username_. </li><li>_V3_AUTH_NO_PRIV_ requires _username_, _authentication_protocol_ and _authentication_key_. </li><li>_V3_AUTH_PRIV_ requires _username_, _authentication_protocol_, _authentication_key_, _encryption_protocol_ and _encryption_key_.</li></ul>",
        "tags": [
          "device"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "device_id",
            "required": true,
            "in": "path",
            "description": "Device ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SNMPDomotzAuthentication"
            }
          }
        ],
        "operationId": "setSNMPAuthentication",
        "responses": {
          "204": {
            "description": ""
          }
        },
        "consumes": [
          "application/json"
        ]
      }
    },
    "/agent/{agent_id}/device/rtd": {
      "get": {
        "summary": "Returns the Round Trip Delay statistics for all devices monitored by the agent. The aggregate values of _avg_min_, _avg_max_, _avg_median_ help to understand the baseline response time of a device in a weekly time frame, while _latest_median_ helps detecting a possible deviation from the baseline",
        "tags": [
          "metrics"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "getAgentRTDStats",
        "responses": {
          "200": {
            "description": "Devices RTD Statistics",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceRTDStatistics"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/agent/{agent_id}/eye-statistics": {
      "get": {
        "summary": "Retrieves information about Domotz Eyes usage and limits",
        "tags": [
          "eyes"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "eyesUsageInfo",
        "responses": {
          "200": {
            "description": "A data structure containing information about current Domotz Eyes usage and limits",
            "schema": {
              "$ref": "#/definitions/DomotzEyesUsageInformation"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/agent/{agent_id}/history/network/event": {
      "get": {
        "summary": "Returns the time series of the state changes of the agent",
        "tags": [
          "metrics"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "The start time of the time series. Default value is one week",
            "type": "string"
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "description": "The end time of the time series. Default value is now",
            "type": "string"
          }
        ],
        "operationId": "getAgentStatusHistory",
        "responses": {
          "200": {
            "description": "A time series",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentHistory"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/agent/{agent_id}/history/network/speed": {
      "get": {
        "summary": "Returns the time series of the Internet Speed measurements taken from the agent, both in \ndownload and in upload.",
        "tags": [
          "metrics"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "The start time of the time series. Default value is one week",
            "type": "string"
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "description": "The end time of the time series. Default value is now",
            "type": "string"
          }
        ],
        "operationId": "getSpeedTestHistory",
        "responses": {
          "200": {
            "description": "A time series",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkSpeedSample"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/alert-profile/binding/agent/{agent_id}": {
      "get": {
        "summary": "Get the alert profile bindings of an agent",
        "tags": [
          "alert profiles"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "getAgentAlertProfile",
        "responses": {
          "200": {
            "description": "The alert profile bindings of an agent",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlertProfileAgentBinding"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/alert-profile/binding/agent/{agent_id}/device": {
      "get": {
        "summary": "Get the alert profile bindings of the devices of an agent",
        "tags": [
          "alert profiles"
        ],
        "parameters": [
          {
            "name": "agent_id",
            "required": true,
            "in": "path",
            "description": "Agent ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "getDevicesAlertProfile",
        "responses": {
          "200": {
            "description": "The alert profile bindings for all devices of the agent",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlertProfileDeviceBinding"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/area": {
      "get": {
        "summary": "Returns all the areas of a Company",
        "tags": [
          "company"
        ],
        "operationId": "listAreas",
        "responses": {
          "200": {
            "description": "The list of all the areas in the User's Company",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Area"
              }
            }
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/area/{area_id}/team": {
      "get": {
        "summary": "Returns all the teams of an Area",
        "tags": [
          "company"
        ],
        "parameters": [
          {
            "name": "area_id",
            "required": true,
            "in": "path",
            "description": "Area ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "listTeams",
        "responses": {
          "200": {
            "description": "The list of all the teams in a Company Area's",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "summary": "Creates a new Team",
        "tags": [
          "company"
        ],
        "parameters": [
          {
            "name": "area_id",
            "required": true,
            "in": "path",
            "description": "Area ID",
            "format": "int32",
            "type": "integer"
          },
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TeamCreation"
            }
          }
        ],
        "operationId": "createTeam",
        "responses": {
          "201": {
            "description": ""
          }
        },
        "consumes": [
          "application/json"
        ]
      }
    },
    "/meta/usage": {
      "get": {
        "summary": "Retrieves information about API usage and limits",
        "tags": [
          "meta"
        ],
        "operationId": "apiUsageInfo",
        "responses": {
          "200": {
            "description": "A data structure containing information about current API usage and usage limits",
            "schema": {
              "$ref": "#/definitions/APIUsageInformation"
            }
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/type/device/base": {
      "get": {
        "summary": "Returns the device types list",
        "tags": [
          "assets"
        ],
        "operationId": "listDeviceBaseTypes",
        "responses": {
          "200": {
            "description": "The types list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceBaseType"
              }
            }
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/type/device/detected": {
      "get": {
        "summary": "Returns the detected device types list",
        "tags": [
          "assets"
        ],
        "operationId": "listDeviceDetectedTypes",
        "responses": {
          "200": {
            "description": "The types list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DetectedDeviceType"
              }
            }
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/user": {
      "get": {
        "summary": "Returns the User information",
        "tags": [
          "user"
        ],
        "operationId": "getUser",
        "responses": {
          "200": {
            "description": "The user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ]
      }
    },
    "/user/{user_id}/alert-profile": {
      "get": {
        "summary": "Returns the list of configured alert profiles. You can configure alert profiles on the Domotz Portal. Alert profiles define the association between a list of events and a notification channel (email, webhook or slack)",
        "tags": [
          "alert profiles"
        ],
        "parameters": [
          {
            "name": "user_id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "format": "int32",
            "type": "integer"
          }
        ],
        "operationId": "getAlertProfiles",
        "responses": {
          "200": {
            "description": "The list of configured alert profiles",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlertProfile"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    }
  },
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "basePath": "/public-api/v1/",
  "definitions": {
    "AgentBase": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "display_name": {
          "type": "string"
        },
        "access_right": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "OWNED",
                "GRANTED",
                "PROPOSED",
                "ASSIGNED"
              ],
              "description": "<ul><li>\n*OWNED*: you own this agent\n</li><li>\n*PROPOSED*: the owner proposed you to access the agent, you can accept or reject the offer\n</li><li>\n*GRANTED*: you accepted the collaboration request for this agent\n</li><li>\n*ASSIGNED*: your team leader has given you access to the agent\n</li></ul>"
            },
            "api_enabled": {
              "type": "boolean",
              "description": "If `false` the agent plan doesn't allow for API access: you only can see this agent in the list"
            },
            "granting_user": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "format": "email"
                }
              }
            }
          }
        },
        "creation_time": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "enum": [
                "ONLINE",
                "OFFLINE"
              ]
            },
            "last_change": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "licence": {
          "type": "object",
          "properties": {
            "bound_mac_address": {
              "type": "string",
              "description": "The MAC address of the primary interface of the device the software agent runs on"
            },
            "code": {
              "type": "string"
            },
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "activation_time": {
              "type": "string",
              "format": "date-time"
            },
            "expiration_time": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "timezone": {
          "type": "string"
        },
        "location": {
          "type": "object",
          "properties": {
            "latitude": {
              "type": "string",
              "pattern": "^-?\\d+(\\.\\d{4})?$"
            },
            "longitude": {
              "type": "string",
              "pattern": "^-?\\d+(\\.\\d{4})?$"
            }
          }
        },
        "version": {
          "type": "object",
          "properties": {
            "agent": {
              "type": "string"
            },
            "package": {
              "type": "string"
            }
          }
        },
        "team": {
          "type": "object",
          "description": "The Team and Company Area information, only available for companies",
          "properties": {
            "area": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "leader_id": {
              "type": "integer",
              "format": "int32"
            },
            "name": {
              "type": "string"
            }
          }
        }
      },
      "required": [
        "display_name",
        "id"
      ]
    },
    "AgentDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/AgentBase"
        },
        {
          "type": "object",
          "properties": {
            "listen_on": {
              "type": "string",
              "description": "The local IP and port the Domotz Agent software is listening on if online - the last known value otherwise"
            },
            "location": {
              "type": "object",
              "properties": {
                "latitude": {
                  "type": "string",
                  "pattern": "^-?\\d+(\\.\\d{4})?$"
                },
                "longitude": {
                  "type": "string",
                  "pattern": "^-?\\d+(\\.\\d{4})?$"
                }
              }
            }
          }
        }
      ]
    },
    "ConnectionConsumption": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum connection consumption (bytes) "
        },
        "current": {
          "type": "integer",
          "format": "int32",
          "description": "Current connection consumption (bytes) "
        }
      },
      "required": [
        "current",
        "limit"
      ]
    },
    "LocalIpDevice": {
      "allOf": [
        {
          "$ref": "#/definitions/IpDevice"
        },
        {
          "type": "object",
          "properties": {
            "hw_address": {
              "type": "string",
              "description": "MAC Address"
            },
            "names": {
              "type": "object",
              "properties": {
                "host": {
                  "type": "string"
                },
                "bonjour": {
                  "type": "string"
                },
                "upnp": {
                  "type": "string"
                },
                "snmp": {
                  "type": "string"
                },
                "dhcp": {
                  "type": "string"
                },
                "inspection": {
                  "type": "string"
                }
              }
            },
            "is_jammed": {
              "type": "boolean",
              "description": "When true, the Domotz Agent is blocking the device to access the Internet. The device can still reach every other device in the local network"
            }
          },
          "description": "Standard device, automatically discovered in the local IP network of the agent."
        }
      ]
    },
    "SubnetIpDevice": {
      "allOf": [
        {
          "$ref": "#/definitions/IpDevice"
        },
        {
          "type": "object",
          "properties": {
            "names": {
              "type": "object",
              "properties": {
                "host": {
                  "type": "string"
                },
                "bonjour": {
                  "type": "string"
                },
                "upnp": {
                  "type": "string"
                },
                "snmp": {
                  "type": "string"
                },
                "inspection": {
                  "type": "string"
                }
              }
            }
          },
          "description": "A device automatically discovered by the agent that exists in an IP subnet defined by the user.\n The agent reaches the device through a Level 3 switch or similar device, so it cannot get the MAC address or other \nlevel 2 information, such as DHCP lease data    \n    "
        }
      ]
    },
    "ExternalIpDevice": {
      "allOf": [
        {
          "$ref": "#/definitions/IpDevice"
        },
        {
          "type": "object",
          "properties": {
            "names": {
              "type": "object",
              "properties": {
                "host": {
                  "type": "string"
                },
                "inspection": {
                  "type": "string"
                }
              }
            }
          },
          "description": "A device added by the means of 'Advanced Monitoring': it is an IP device manually added by \nthe user, no discoveries are done over it, just periodical ping to see whether it is reachable"
        }
      ]
    },
    "AbstractDevice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "main_id": {
          "type": "integer",
          "format": "int32",
          "description": "In a clustered configuration, the main device id"
        },
        "display_name": {
          "type": "string"
        },
        "protocol": {
          "type": "string",
          "enum": [
            "IP",
            "DUMMY",
            "IP_EXTERNAL"
          ]
        },
        "authentication_status": {
          "type": "string",
          "enum": [
            "AUTHENTICATED",
            "NO_AUTHENTICATION",
            "PENDING",
            "REQUIRED",
            "WRONG_CREDENTIALS"
          ],
          "description": "When defined the device requires authentication info to perform extended discovery <ul>\n<li>\n*REQUIRED*: the device requires authentication, extended discovery is locked\n</li><li>\n*PENDING*: credentials have been submitted but not verified yet\n</li><li>\n*WRONG_CREDENTIALS*: device authentication failed\n</li><li>\n*AUTHENTICATED*: device authentication succeeded\n</li></ul>\n"
        },
        "user_data": {
          "type": "object",
          "properties": {
            "model": {
              "type": "string",
              "maxLength": 100
            },
            "name": {
              "type": "string",
              "maxLength": 64
            },
            "type": {
              "type": "integer",
              "format": "int32"
            },
            "vendor": {
              "type": "string",
              "maxLength": 100
            }
          }
        },
        "first_seen_on": {
          "type": "string",
          "format": "date-time"
        },
        "importance": {
          "type": "string",
          "enum": [
            "VITAL",
            "FLOATING"
          ]
        },
        "type": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "detected_id": {
              "type": "integer",
              "format": "int32"
            }
          },
          "description": "The device type, if recognised by domotz"
        },
        "details": {
          "type": "object",
          "properties": {
            "zone": {
              "type": "string"
            },
            "room": {
              "type": "string"
            },
            "snmp_read_community": {
              "type": "string",
              "description": "Deprecated. Please use <a href='#getsnmpauthentication'> getSNMPAuthentication </a>"
            },
            "snmp_write_community": {
              "type": "string",
              "description": "Deprecated. Please use <a href='#getsnmpauthentication'> getSNMPAuthentication </a>"
            }
          },
          "description": "DeviceDetails"
        }
      },
      "required": [
        "display_name",
        "id",
        "protocol"
      ],
      "description": "Base abstract class for all devices"
    },
    "IpDevice": {
      "allOf": [
        {
          "$ref": "#/definitions/AbstractDevice"
        },
        {
          "type": "object",
          "properties": {
            "ip_addresses": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              }
            },
            "last_status_change": {
              "type": "string",
              "format": "date-time"
            },
            "status": {
              "type": "string",
              "enum": [
                "ONLINE",
                "OFFLINE",
                "DOWN",
                "HIDDEN"
              ]
            },
            "vendor": {
              "type": "string",
              "maxLength": 100
            },
            "grace_period": {
              "type": "integer",
              "format": "int32",
              "description": "The number of seconds a device must be unreachable before being declared DOWN"
            },
            "model": {
              "type": "string",
              "maxLength": 255
            },
            "agent_reachable": {
              "type": "boolean",
              "description": "When `true` the device is reachable by the agent over an IP network.\nWhen `false` Domotz knows about the status of the device by the means of another source e.g. a third party controller.\n\nThis field is significant only when the status of the device is `ONLINE` and its value is `false` because it means\nthat even if the IP device is up and running, many features aren't allowed, such as the direct connection or the TCP\nservices monitoring."
            }
          },
          "description": "Base abstract class for all IP devices"
        }
      ]
    },
    "DummyDevice": {
      "allOf": [
        {
          "$ref": "#/definitions/AbstractDevice"
        },
        {
          "type": "object",
          "properties": {},
          "description": "A device that has no network access whatsoever and cannot be discovered or interacted with by\n     the agent.\n \n A user can create a Dummy Device to attach it to a power outlet so that it is easier to remember which port controls\nthe device"
        }
      ]
    },
    "DevicePowerAction": {
      "type": "object",
      "properties": {
        "on": {
          "type": "boolean",
          "description": "Indicates that the device can be powered on. Available if the device is connected to one or more PDU. <br><br> In the latter case the operation will be performed on all available PDUs.<br><br> If there is no PDU but there is one POE connection, the operation will still available through that connection."
        },
        "off": {
          "type": "boolean",
          "description": "Indicates that the device can be powered off. Available if the device is connected to one or more PDU. <br><br> In the latter case the operation will be performed on all available PDUs.<br><br> If there no PDU but there is one POE connection, the operation will still be available through that connection.<br><br>"
        },
        "cycle": {
          "type": "boolean",
          "description": "Indicates that a power cycle on the device is possible. Available if the device is connected to just one PDU."
        },
        "software_reboot": {
          "type": "boolean",
          "description": "Indicates that software reboot on the device is possible.<br><br> The operation availability depends on the device."
        }
      }
    },
    "SNMPDomotzEye": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique identifier of the SNMP Domotz Eye"
        },
        "category": {
          "type": "string",
          "enum": [
            "OTHER",
            "CONSUMABLE",
            "CPU",
            "DISK_SPACE",
            "MEMORY",
            "NETWORK_TRAFFIC",
            "TEMPERATURE"
          ],
          "description": "The category of the OID"
        },
        "value_type": {
          "type": "string",
          "enum": [
            "STRING",
            "NUMERIC"
          ],
          "description": "The type of the OID"
        },
        "oid": {
          "type": "string",
          "description": "The OID string"
        },
        "name": {
          "type": "string",
          "description": "The name of the Domotz Eyes"
        },
        "latest_value": {
          "type": "string",
          "description": "The value retrieved on the OID"
        },
        "last_update": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of the latest update"
        }
      },
      "required": [
        "category",
        "id",
        "last_update",
        "latest_value",
        "name",
        "oid",
        "value_type"
      ],
      "description": "Information about a configured SNMP Domotz Eye"
    },
    "SNMPDomotzEyeCreation": {
      "type": "object",
      "properties": {
        "oid": {
          "type": "string",
          "description": "The OID string"
        },
        "name": {
          "type": "string",
          "description": "The name of the Domotz Eyes"
        },
        "category": {
          "type": "string",
          "enum": [
            "OTHER",
            "CONSUMABLE",
            "CPU",
            "DISK_SPACE",
            "MEMORY",
            "NETWORK_TRAFFIC",
            "TEMPERATURE"
          ],
          "description": "The category of the OID"
        },
        "value_type": {
          "type": "string",
          "enum": [
            "STRING",
            "NUMERIC"
          ],
          "description": "The type of the OID"
        }
      },
      "required": [
        "category",
        "name",
        "oid",
        "value_type"
      ],
      "description": "SNMP Domotz Eye Data"
    },
    "SNMPDomotzEyeTriggerFunction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique identifier of the SNMP Trigger function"
        },
        "name": {
          "type": "string",
          "description": "The name of the function"
        },
        "cardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The number of arguments of the function"
        },
        "value_types": {
          "type": "string",
          "enum": [
            "STRING",
            "NUMERIC"
          ],
          "description": "The type of the operands"
        }
      },
      "required": [
        "cardinality",
        "id",
        "name",
        "value_types"
      ],
      "description": "Information about a trigger function"
    },
    "DeviceEyeSNMPHistorySample": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time the sample was reported to Domotz"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "timestamp",
        "value"
      ]
    },
    "SNMPDomotzEyeTrigger": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique identifier of the SNMP Trigger"
        },
        "name": {
          "type": "string",
          "description": "The name of the trigger"
        },
        "function_id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique identifier of the function assigned to the trigger"
        },
        "operands": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The operands for the function"
        },
        "creation_time": {
          "type": "string",
          "format": "date-time"
        },
        "alert": {
          "type": "object",
          "description": "The alerts details",
          "properties": {
            "email": {
              "type": "boolean",
              "description": "True if the email alert is active"
            },
            "mobile": {
              "type": "boolean",
              "description": "True if the mobile alert is active"
            }
          }
        }
      },
      "required": [
        "function_id",
        "id",
        "name",
        "operands"
      ],
      "description": "Information about a trigger"
    },
    "TCPDomotzEye": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "The port number"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique identifier of the TCP Domotz Eye"
        },
        "status": {
          "type": "string",
          "enum": [
            "UP",
            "DOWN"
          ],
          "description": "The status of the TCP service"
        },
        "last_update": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of the latest update"
        }
      },
      "required": [
        "id",
        "last_update",
        "port",
        "status"
      ],
      "description": "Information about a configured TCP Domotz Eye"
    },
    "TCPDomotzEyeCreation": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "The port number"
        }
      },
      "required": [
        "port"
      ],
      "description": "TCP Domotz Eye Data"
    },
    "DeviceHistory": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time the sample was reported to Domotz"
        },
        "type": {
          "type": "string",
          "enum": [
            "IP_CHANGE",
            "CREATED",
            "UP",
            "DOWN"
          ],
          "description": "The device event type"
        },
        "details": {
          "type": "object",
          "properties": {
            "new_ip": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The new IP addresses"
            },
            "old_ip": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The old IP addresses"
            }
          }
        }
      },
      "required": [
        "timestamp",
        "type"
      ]
    },
    "DeviceRTDHistorySample": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time the sample was reported to Domotz"
        },
        "min": {
          "type": "string",
          "pattern": "^-?\\d+(\\.\\d{1})?$"
        },
        "median": {
          "type": "string",
          "pattern": "^-?\\d+(\\.\\d{1})?$"
        },
        "max": {
          "type": "string",
          "pattern": "^-?\\d+(\\.\\d{1})?$"
        },
        "lost_packet_count": {
          "type": "integer",
          "format": "int32"
        },
        "sent_packet_count": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "timestamp"
      ]
    },
    "SNMPDomotzAuthentication": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "enum": [
            "V2",
            "V1",
            "V3_AUTH_PRIV",
            "V3_NO_AUTH",
            "V3_AUTH_NO_PRIV"
          ],
          "description": "The configured SNMP version"
        },
        "snmp_read_community": {
          "type": "string"
        },
        "snmp_write_community": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "authentication_protocol": {
          "type": "string",
          "enum": [
            "MD5",
            "SHA"
          ],
          "description": "The SNMP authentication protocol"
        },
        "authentication_key": {
          "type": "string"
        },
        "encryption_protocol": {
          "type": "string",
          "enum": [
            "DES",
            "AES"
          ],
          "description": "The SNMP encryption protocol"
        },
        "encryption_key": {
          "type": "string"
        }
      },
      "required": [
        "version"
      ],
      "description": "The SNMP authentication setting of a device"
    },
    "DeviceRTDStatistics": {
      "type": "object",
      "properties": {
        "device_id": {
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of the latest update"
        },
        "avg_max": {
          "type": "string",
          "pattern": "^-?\\d+(\\.\\d{1})?$"
        },
        "avg_median": {
          "type": "string",
          "pattern": "^-?\\d+(\\.\\d{1})?$"
        },
        "avg_min": {
          "type": "string",
          "pattern": "^-?\\d+(\\.\\d{1})?$"
        },
        "latest_median": {
          "type": "string",
          "pattern": "^-?\\d+(\\.\\d{1})?$",
          "description": "The median value of the latest collection sample"
        },
        "latest_lost_packet_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of lost packets of the latest collection sample"
        },
        "latest_sent_packet_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of sent packets of the latest collection sample"
        }
      },
      "required": [
        "device_id",
        "timestamp"
      ]
    },
    "DomotzEyesUsageInformation": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Number of allowed Domotz Eyes for the agent"
        },
        "usage": {
          "type": "object",
          "properties": {
            "total": {
              "type": "integer",
              "format": "int32",
              "description": "Number of configured Domotz Eyes on the agent."
            },
            "tcp": {
              "type": "integer",
              "format": "int32",
              "description": "Number of configured Domotz Eyes of type `tcp` on the agent."
            },
            "snmp": {
              "type": "integer",
              "format": "int32",
              "description": "Number of configured Domotz Eyes of type `snmp` on the agent."
            }
          }
        }
      },
      "description": "Information about Domotz Eyes current usage and limits"
    },
    "AgentHistory": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time the sample was reported to Domotz"
        },
        "type": {
          "type": "string",
          "enum": [
            "CONNECTION_RECOVERED",
            "CONNECTION_LOST",
            "UP",
            "DOWN"
          ],
          "description": "The agent event type"
        }
      },
      "required": [
        "timestamp",
        "type"
      ]
    },
    "NetworkSpeedSample": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time the sample was reported to Domotz"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "A pair of values: the download and upload speed, in Bit Per Seconds (bps), as measured by the Agent"
        }
      },
      "description": "A Network Speed Sample is the result of the measurement of the Internet download and upload\n     speed, in bits per second, taken by the Agent"
    },
    "AlertProfileAgentBinding": {
      "type": "object",
      "properties": {
        "alert_profile_id": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the alert profile"
        }
      },
      "required": [
        "alert_profile_id"
      ]
    },
    "AlertProfileDeviceBinding": {
      "type": "object",
      "properties": {
        "alert_profile_id": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the alert profile"
        },
        "device_id": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "alert_profile_id",
        "device_id"
      ]
    },
    "Area": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The identifier of the Area"
        },
        "name": {
          "type": "string",
          "description": "The name of the Area"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "description": "Represents an area of the Company"
    },
    "Team": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The identifier of the Team"
        },
        "name": {
          "type": "string",
          "description": "The name of the Team"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "description": "Represents a team of the Company"
    },
    "TeamCreation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The Team's name"
        },
        "leader": {
          "type": "object",
          "description": "The Team Leader",
          "properties": {
            "name": {
              "type": "string",
              "description": "The Team Leader's name"
            },
            "password": {
              "type": "string",
              "description": "The Team Leader's password"
            },
            "details": {
              "type": "object",
              "description": "The Team Leader's details",
              "properties": {
                "display_name": {
                  "type": "string",
                  "description": "The Team Leader's display name"
                }
              },
              "required": [
                "display_name"
              ]
            }
          },
          "required": [
            "details",
            "name",
            "password"
          ]
        }
      },
      "required": [
        "leader",
        "name"
      ],
      "description": "Team Creation under specified Area"
    },
    "APIUsageInformation": {
      "type": "object",
      "properties": {
        "daily_limit": {
          "type": "integer",
          "format": "int32",
          "description": "Number of allowed calls to the API in a 24 hours span."
        },
        "concurrent_allowed": {
          "type": "integer",
          "format": "int32",
          "description": "Number of allowed calls to the API in a minute."
        },
        "daily_usage": {
          "type": "integer",
          "format": "int32",
          "description": "Number of API call performed in the last 24 hours. "
        },
        "by_key": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The mnemonic API key name"
              },
              "count": {
                "type": "integer",
                "format": "int32",
                "description": "The number of calls done using this key in the last 24 hours"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "description": "The ID of the API key"
              }
            }
          }
        },
        "by_ip": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The IP address"
              },
              "count": {
                "type": "integer",
                "format": "int32",
                "description": "The number of calls originated from that IP address"
              }
            }
          }
        },
        "by_resource": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The base resource name"
              },
              "count": {
                "type": "integer",
                "format": "int32",
                "description": "The number of calls for the resource"
              }
            }
          }
        }
      },
      "description": "Information about Domotz API current usage and usage limits"
    },
    "DeviceBaseType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "An unique identifier of the type, referred in the `Device` entity"
        },
        "identifier": {
          "type": "string",
          "description": "The name of the type"
        },
        "label": {
          "type": "string",
          "description": "A human-readable short description of the type   "
        },
        "vital": {
          "type": "boolean",
          "description": "Whether a device of this type will be marked as `VITAL` as soon as recognised"
        }
      },
      "description": "A device type, either set by the user or as identified by the Domotz system"
    },
    "DetectedDeviceType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "An unique identifier of the type, referred in the `Device` entity"
        },
        "identifier": {
          "type": "string",
          "description": "The name of the type"
        },
        "label": {
          "type": "string",
          "description": "A human-readable short description of the type"
        },
        "type_id": {
          "type": "integer",
          "format": "int32",
          "description": "The corresponding `device type` "
        },
        "capabilities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The features of the device"
        }
      },
      "description": "A device type, detected by the Domotz device identification feature"
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "AlertProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the event profile"
        },
        "name": {
          "type": "string",
          "description": "The symbolic name associated to the profile"
        },
        "is_enabled": {
          "type": "boolean",
          "description": "true if the event profile is enabled, false otherwise"
        },
        "description": {
          "type": "string",
          "description": "The description of the alert profile"
        },
        "tag": {
          "type": "string",
          "description": "A label associated to the profile"
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "device_status",
              "device_heartbeat_lost",
              "device_ip_change",
              "device_snmp",
              "device_tcp",
              "device_rtd",
              "device_configuration_change",
              "device_configuration_misalignment",
              "agent_status",
              "agent_speed_test",
              "agent_device_discovery",
              "agent_security_issue"
            ]
          },
          "description": "The list of events associated to the profile"
        }
      },
      "required": [
        "id"
      ]
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "X-Api-Key",
      "in": "header",
      "description": "Get you API Key from the Domotz Portal or contact us"
    }
  },
  "x-components": {}
}